@page "/viewsource"
@using MudBlazor
@inject IDialogService DialogService
@inject AppStateService AppState

<h1>Source Data</h1>

<MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="OpenInputDialog">
    <MudIcon Icon="@Icons.Material.Filled.Add" Class="mr-1" /> Input Source Data
</MudButton>

<MudButton OnClick="AppState.SaveSourceTablesToLocalStorage"> tallenna</MudButton>


<MudTable Items="@AppState.SourceTables" Hover="true" Bordered="true">
    <HeaderContent>
        <MudTh >Table/Column Name</MudTh>
        <MudTh>Example Data</MudTh>
        <MudTh>Row Count</MudTh>
        <MudTh>Unique Count</MudTh>
        <MudTh>Null Count</MudTh>
    </HeaderContent>
    <RowTemplate>
        <MudTd DataLabel="Table Name">@context.TableName</MudTd>
        <MudTd DataLabel="Comment" colspan="5">
            <MudTextField @bind-Value="@context.Comment" Variant="Variant.Outlined" Size="Size.Small"
                          Lines="1"/>
        </MudTd>
    </RowTemplate>
    <ChildRowContent >
        
        
            @foreach (var column in context.Columns)
            {
                <MudTr>
                    <MudTd DataLabel="Column Name" Style="width: 20%;">@column.ColumnName</MudTd>
                    <MudTd DataLabel="Example Data">@column.ExampleData</MudTd>
                    <MudTd DataLabel="Row Count">@column.RowCount</MudTd>
                    <MudTd DataLabel="Unique Count">@column.UniqueCount</MudTd>
                    <MudTd DataLabel="Null Count">@column.NullCount</MudTd>
                </MudTr>
            }
    </ChildRowContent>
</MudTable>

@code {
    private async Task OpenInputDialog()
    {
        var dialog = await DialogService.ShowAsync<InputSourceData>("Input Source Data",
            
            new DialogOptions { CloseOnEscapeKey = true, BackdropClick = false }
            );
        
        var result = await dialog.Result;
        
        if (!result.Canceled)
        {
            if (result.Data is List<SourceTable> processedTables)
            {
                await AppState.MergeSourceTables(processedTables);// SourceTables = processedTables;
                StateHasChanged(); // Refresh the UI
            }
        }
    }
}
