@page "/viewsource"
@using System.Collections.ObjectModel
@using MudBlazor
@inject IDialogService DialogService
@inject AppStateService AppState

<h1>Source Data</h1>

<MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="OpenInputDialog">
    <MudIcon Icon="@Icons.Material.Filled.Add" Class="mr-1"/> Input Source Data
</MudButton>

<MudButton OnClick="AppState.SaveSourceTablesToLocalStorage"> tallenna</MudButton>


<MudButton Variant="Variant.Outlined" OnClick="OpenColumnFilterDialog" Class="mb-2">Filter Columns</MudButton>

<MudTable Items="@FilteredSourceTables" Hover="true" Bordered="true">
    <HeaderContent>
        <MudTh >Table/Column Name</MudTh>
        <MudTh>Example Data</MudTh>
        <MudTh>Row Count</MudTh>
        <MudTh>Unique Count</MudTh>
        <MudTh>Null Count</MudTh>
    </HeaderContent>
    <RowTemplate>
        <MudTd DataLabel="Table Name">
            <MudIconButton Icon="@Icons.Material.Filled.KeyboardArrowDown" Size="Size.Small"
                           @onclick="@(() => ToggleExpand(context))"/>
            @context.TableName
        </MudTd>
        <MudTd DataLabel="Comment" colspan="5">
            <MudTextField @bind-Value="@context.Comment" Variant="Variant.Outlined" Size="Size.Small"
                          Lines="1"/>
        </MudTd>
    </RowTemplate>
    <ChildRowContent >
        @if (expandedTables.Contains(context))
        {
            @foreach (var column in context.Columns)
            {
                <MudTr>
                    <MudTd DataLabel="Column Name" Style="width: 20%;">@column.ColumnName</MudTd>
                    <MudTd DataLabel="Example Data">@column.ExampleData</MudTd>
                    <MudTd DataLabel="Row Count">@column.RowCount</MudTd>
                    <MudTd DataLabel="Unique Count">@column.UniqueCount</MudTd>
                    <MudTd DataLabel="Null Count">@column.NullCount</MudTd>
                </MudTr>
            }
        }
    </ChildRowContent>
</MudTable>

@code {
    private HashSet<SourceTable> expandedTables = new HashSet<SourceTable>();
    private Dictionary<string, int> columnCounts = new Dictionary<string, int>();
    private IReadOnlyCollection<string> selectedColumnNames = new List<string>();
    private string columnFilter = "";

    private List<SourceTable> FilteredSourceTables => AppState.SourceTables
        .Where(table => selectedColumnNames.Count == 0 ||  table.Columns.Any(x => selectedColumnNames.Contains(x.ColumnName))) // Only show tables with selected columns
        .ToList();

    private async Task OpenInputDialog()
    {
        var dialog = await DialogService.ShowAsync<InputSourceData>("Input Source Data",
            new DialogOptions { CloseOnEscapeKey = true, BackdropClick = false }
        );

        var result = await dialog.Result;

        if (!result.Canceled)
        {
            if (result.Data is List<SourceTable> processedTables)
            {
                await AppState.MergeSourceTables(processedTables); // SourceTables = processedTables;
                StateHasChanged(); // Refresh the UI
            }
        }
    }

    private void ToggleExpand(SourceTable table)
    {
        if (expandedTables.Contains(table))
        {
            expandedTables.Remove(table);
        }
        else
        {
            expandedTables.Add(table);
        }
    }

    private async Task OpenColumnFilterDialog()
    {
        var columnCounts = AppState.SourceTables
            .SelectMany(t => t.Columns)
            .GroupBy(c => c.ColumnName)
            .ToDictionary(g => g.Key, g => g.Count());
        var dialog = await DialogService.ShowAsync<ColumnFilterDialog>("Filter Columns", new DialogParameters
        {
            { "ColumnCounts", columnCounts },
            { "InitialSelectedColumns", selectedColumnNames },
            { "OnFilterApplied", EventCallback.Factory.Create<IReadOnlyCollection<string>>(this, OnColumnFilterApplied) }
        }, new DialogOptions
        {
            CloseOnEscapeKey = true,
            BackdropClick = true,
            MaxWidth = MaxWidth.Medium,
            FullWidth = true
        });

        var result = await dialog.Result;
    }

    private void OnColumnFilterApplied(IReadOnlyCollection<string> selectedColumns)
    {
        selectedColumnNames = selectedColumns;
        StateHasChanged();

        var test = FilteredSourceTables;
        var dbugCount = test.Count();
        
    }

}