@page "/targettables"
@using MudBlazor
@inject AppStateService AppState
@inject IDialogService DialogService

<h1>Target Tables</h1>

<MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="OpenCreateTargetTableDialog" Class="mb-4">
    <MudIcon Icon="@Icons.Material.Filled.Add" Class="mr-1" /> Create New Target Table
</MudButton>

@if (AppState.TargetTables.Any())
{
    <MudText Typo="Typo.h6" Class="mt-4">Defined Target Tables:</MudText>
    <MudTable Items="AppState.TargetTables">
        
        <HeaderContent>
            <MudTh>Table Name</MudTh>
            <MudTh>Actions</MudTh>
        </HeaderContent>
        <RowTemplate>
            <MudTd DataLabel="Table Name">@context.Name</MudTd>
            
            <MudTd DataLabel="Actions">
                <MudIconButton Icon="@Icons.Material.Filled.Edit" Color="Color.Primary" OnClick="@(() => EditTargetTable(@context))" />
                <MudIconButton Icon="@Icons.Material.Filled.Delete" Color="Color.Error" OnClick="@(() => DeleteTargetTable(@context))" />
            </MudTd>
        </RowTemplate>



    </MudTable>
}
else
{
    <MudText Class="mt-4">No target tables defined yet. Click 'Create New Target Table' to begin.</MudText>
}

<MudText Typo="Typo.h6" Class="mt-4">Target Table Relationships:</MudText>
@if (AppState.TargetTableRelationships.Any())
{
}
else
{
    <MudText>No target table relationships defined.</MudText>
}

<MudButton Variant="Variant.Outlined" Color="Color.Secondary" OnClick="OpenCreateRelationshipDialog" Class="mt-2">
    <MudIcon Icon="@Icons.Material.Filled.Link" Class="mr-1" /> Create New Relationship
</MudButton>

@code {

    DialogOptions options = new DialogOptions
    {
        CloseOnEscapeKey = true,
        MaxWidth = MaxWidth.ExtraLarge,
        FullWidth = true,
    };

private async Task OpenCreateTargetTableDialog()
    {

        var newTable = new TargetTableDefinition();
        var parameters = new DialogParameters { ["TargetTable"] = newTable };
        var dialog = await DialogService.ShowAsync<CreateTargetTableDialog>("Create New Target Table",parameters, options);
        var result = await dialog.Result;
        if (!result.Canceled)
        {
            AppState.TargetTables.Add(newTable);
            await AppState.SaveTargetTables();
            StateHasChanged();
        }
    }

    private async Task EditTargetTable(TargetTableDefinition tableToEdit)
    {
        var parameters = new DialogParameters { ["TargetTable"] = tableToEdit };
        var dialog = await DialogService.ShowAsync<CreateTargetTableDialog>("Edit Target Table", parameters,options);
        var result = await dialog.Result;
        if (!result.Canceled)
        {
            await AppState.SaveTargetTables();
        }
    }

    private async Task OpenCreateRelationshipDialog()
    {
        var dialog = await DialogService.ShowAsync<CreateRelationshipDialog>("Create New Relationship");
        var result = await dialog.Result;
        if (!result.Canceled && result.Data is TargetTableRelationship newRelationship)
        {
            AppState.TargetTableRelationships.Add(newRelationship);
            await AppState.SaveTargetTables();
        }
    }

    private async Task DeleteRelationship(TargetTableRelationship relationshipToDelete)
    {
        bool? result = await DialogService.ShowMessageBox(
            "Confirm Delete",
            $"Are you sure you want to delete the relationship between {relationshipToDelete.SourceTableName}.{relationshipToDelete.SourceColumnName} and {relationshipToDelete.TargetTableName}.{relationshipToDelete.TargetColumnName}?",
            yesText: "Delete", cancelText: "Cancel");

        if (result == true)
        {
            AppState.TargetTableRelationships.Remove(relationshipToDelete);
            await AppState.SaveTargetTables();
        }
    }

    private async Task DeleteTargetTable(TargetTableDefinition context)
    {
        bool? result = await DialogService.ShowMessageBox(
            "Confirm Delete",
            $"Are you sure you want to delete the target table {context.Name}?",
            yesText: "Delete", cancelText: "Cancel");

        if (result == true)
        {
            AppState.TargetTables.Remove(context);
            await AppState.SaveTargetTables();
        }
    }

}
