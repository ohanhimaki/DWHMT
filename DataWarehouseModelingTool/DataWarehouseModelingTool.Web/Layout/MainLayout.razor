@inherits LayoutComponentBase
@inject AppStateService AppState
@inject NavigationManager NavigationManager
@inject IJSRuntime JSRuntime
@using MudBlazor

<MudThemeProvider Theme="@_currentTheme" />
<MudLayout>
    <MudAppBar Elevation="1">
        <MudIconButton Icon="@Icons.Material.Filled.Menu" Color="Color.Inherit" Edge="Edge.Start" OnClick="@((e) => DrawerOpen = !DrawerOpen)" />
        <MudText Typo="Typo.h5" Class="ml-3">Your Data Modeler</MudText>
        <MudSpacer />
        @if (AppState.SourceTables.Any())
        {
            <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="DownloadProjectState">
                <MudIcon Icon="@Icons.Material.Filled.Download" Class="mr-1" /> Export
            </MudButton>
        }
        else
        {
            <InputFile id="uploadInput" OnChange="HandleFileUpload" style="display:none;" />
            <MudButton Variant="Variant.Filled" Color="Color.Secondary" OnClick="TriggerFileUpload">
                <MudIcon Icon="@Icons.Material.Filled.Upload" Class="mr-1" /> Upload JSON
            </MudButton>
        }
        <MudButton Variant="Variant.Outlined" Color="Color.Warning" Class="ml-2" OnClick="ClearProjectState">
            <MudIcon Icon="@Icons.Material.Filled.DeleteSweep" Class="mr-1" /> Clear
        </MudButton>
    </MudAppBar>
    <MudDrawer @bind-Open="@DrawerOpen" ClipMode="DrawerClipMode.Always">
        <MudDrawerHeader>
            <MudText Typo="Typo.h6">Menu</MudText>
        </MudDrawerHeader>
        <NavMenu />
    </MudDrawer>
    <MudMainContent>
        @Body
    </MudMainContent>
</MudLayout>

@code {
    bool DrawerOpen { get; set; } = true;
    private MudTheme _currentTheme = new MudTheme();

    protected override async Task OnInitializedAsync()
    {
        await AppState.LoadDataFromLocalStorage();
    }

    private async Task DownloadProjectState()
    {
        await AppState.DownloadStateAsJson();
    }

    private async Task ClearProjectState()
    {
        bool confirmed = await JSRuntime.InvokeAsync<bool>("confirm", "Are you sure you want to clear the current project state? This action cannot be undone.");
        if (confirmed)
        {
            await AppState.ClearSourceTables();
            NavigationManager.NavigateTo("/", forceLoad: true);
        }
    }

    private async Task HandleFileUpload(InputFileChangeEventArgs e)
    {
        if (e.FileCount > 0)
        {
            var file = e.File;
            using var reader = new System.IO.StreamReader(file.OpenReadStream(file.Size));
            var jsonContent = await reader.ReadToEndAsync();
            await AppState.UploadStateFromJson(jsonContent);
            NavigationManager.NavigateTo("/", forceLoad: true);
        }
    }

    private async Task TriggerFileUpload()
    {
        await JSRuntime.InvokeVoidAsync("eval", "document.getElementById('uploadInput').click();");
    }
}
