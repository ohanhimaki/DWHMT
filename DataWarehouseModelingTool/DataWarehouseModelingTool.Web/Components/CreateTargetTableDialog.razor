@using MudBlazor
@inject AppStateService AppState

<MudDialog>
    <DialogContent>
        <MudTextField @bind-Value="targetTableName" Label="Target Table Name" Variant="Variant.Outlined" Class="mb-3" />

        <MudText Typo="Typo.h6" Class="mb-2">Map Source Columns</MudText>
        
        <MudGrid>
            <MudItem xs="12" md="6">

                @if (_sourceColumnInfos.Any())
                {
                    <MudTable Items="_sourceColumnInfos"
                              Height="60vh"
                              MultiSelection="true"
                          @bind-SelectedItems="_selectedSourceColumns">
                    <ToolBarContent>
                        <MudButton OnClick="@(() => AddNewColumnFromSelectedSourceColumns())">Lisää valituista sarake</MudButton>
                        <MudButton OnClick="@(() => AddSelectedColumns())">Lisää valitut sarakkeet</MudButton>

                    </ToolBarContent>
                    <HeaderContent>
                        <MudTh>Table name</MudTh>
                        <MudTh>ColumnName name</MudTh>
                        <MudTh>ExampleData name</MudTh>
                        <MudTh>RowCount</MudTh>
                        <MudTh>UniqueCount</MudTh>
                        <MudTh>NullCount</MudTh>
                        <MudTh></MudTh>
                    </HeaderContent>
                    <RowTemplate>
                        <MudTd DataLabel="Table">@context.TableName </MudTd>
                        <MudTd DataLabel="column">@context.ColumnName </MudTd>
                        <MudTd DataLabel="example">@context.ExampleData </MudTd>
                        <MudTd DataLabel="rowcount">@context.RowCount </MudTd>
                        <MudTd DataLabel="uniquecount">@context.UniqueCount </MudTd>
                        <MudTd DataLabel="nullcount">@context.NullCount </MudTd>
                        <MudTd>
                            <MudStack>
                                <MudIconButton Icon="@Icons.Material.Filled.Add" Size="Size.Small" Color="Color.Primary" OnClick="@(() => AddColumnMapping(context))"></MudIconButton>
                            </MudStack>
                        </MudTd>
                    </RowTemplate>
                </MudTable>


                }
            </MudItem>
            <MudItem xs="12" md="6">
                <MudTable Items="TargetTable.ColumnMappings"
                          
edit
                          Height="60vh"
                          >

                    <HeaderContent>
                        <MudTh>ColumnName name</MudTh>
                        <MudTh>SourceColumns</MudTh>
                        <MudTh>IsKey</MudTh>
                        <MudTh>Description</MudTh>
                        <MudTh></MudTh>
                    </HeaderContent>
                    <RowTemplate>
                        <MudTd DataLabel="column">
                            <MudTextField Label="ColumnName" @bind-Value="@context.TargetColumnName"/>
                        </MudTd>
                        <MudTd DataLabel="example">@context.SourceColumnNames </MudTd>
                        <MudTd DataLabel="rowcount">@context.IsKey </MudTd>
                        <MudTd DataLabel="uniquecount">@context.Description </MudTd>
                        <MudTd>
                            <MudStack>
                                <MudIconButton Icon="@Icons.Material.Filled.Add" Size="Size.Small" Color="Color.Primary" ></MudIconButton>
                            </MudStack>
                        </MudTd>
                    </RowTemplate>
                </MudTable>

            </MudItem>
        </MudGrid>

        

    </DialogContent>
    <DialogActions>
        <MudButton OnClick="Cancel">Cancel</MudButton>
        <MudButton Color="Color.Primary" OnClick="Save">Save</MudButton>
    </DialogActions>
</MudDialog>

@code {
    [CascadingParameter] IMudDialogInstance MudDialog { get; set; }
    [Parameter] public TargetTableDefinition TargetTable { get; set; }

    // private Dictionary<SourceColumnReference,SourceColumnInfo> _sourceColumnInfos = new Dictionary<SourceColumnReference, SourceColumnInfo>();
    
    private List<SourceColumnInfo> _sourceColumnInfos = new List<SourceColumnInfo>();
    

    private string targetTableName;
    private HashSet<SourceColumnInfo>? _selectedSourceColumns;


    protected override void OnInitialized()
    {
        targetTableName = TargetTable?.Name ?? "";
        
        _sourceColumnInfos = AppState.SourceTables.SelectMany(x => x.Columns).ToList();
        
        
        
    }
    
    private void Cancel()
    {
        MudDialog.Cancel();
    }


    private void Save(MouseEventArgs obj)
    {
        TargetTable.Name = targetTableName;
        MudDialog.Close();
    }

    private Task AddColumnMapping(SourceColumnInfo context)
    {
        var listOfSourceColumns = new List<SourceColumnInfo>() { context };
        TargetTable.AddColumnFromSourceColumns(listOfSourceColumns);
        return Task.CompletedTask;
    }

    private Task AddNewColumnFromSelectedSourceColumns()
    {
        if (_selectedSourceColumns == null || _selectedSourceColumns.Count == 0)
        {
            //todo message
            return Task.CompletedTask;
        }
        var listOfSourceColumns = new List<SourceColumnInfo>();
        foreach (var selectedColumn in _selectedSourceColumns)
        {
            listOfSourceColumns.Add(selectedColumn);
        }
        TargetTable.AddColumnFromSourceColumns(listOfSourceColumns);
        _selectedSourceColumns.Clear();
        return Task.CompletedTask;
        
    }

    private Task AddSelectedColumns()
    {
        if (_selectedSourceColumns == null || _selectedSourceColumns.Count == 0)
        {
            //todo message
            return Task.CompletedTask;
        }
        foreach (var selectedColumn in _selectedSourceColumns)
        {
            TargetTable.AddColumnFromSourceColumns(new List<SourceColumnInfo>() { selectedColumn });
        }
        _selectedSourceColumns.Clear();
        return Task.CompletedTask;
    }

}
