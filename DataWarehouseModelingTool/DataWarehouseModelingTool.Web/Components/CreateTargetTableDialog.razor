@using MudBlazor
@inject AppStateService AppState
@inject IDialogService DialogService

<style>
    .selected {
        background-color: #1E88E5 !important;
    }
    .selected > td {
        color: white !important;
    }
    .selected > td .mud-input {
        color: white !important;
    }
</style>
<MudDialog>
    <DialogContent>
        <MudTextField @bind-Value="targetTableName" Label="Target Table Name" Variant="Variant.Outlined" Class="mb-3" />

        <MudText Typo="Typo.h6" Class="mb-2">Map Source Columns</MudText>
        
        <MudGrid>
            <MudItem xs="12" md="6">

                @if (_sourceColumnInfos.Any())
                {
                    <MudTable Items="_sourceColumnInfos"
                              Height="60vh"
                              MultiSelection="true"
                              T="SourceColumnInfo"
                              SelectedItems="_selectedSourceColumns"
                                SelectedItemsChanged="@((items) => SelectedSourceColumnChanged(items))"
                              >
                    <ToolBarContent>
                        <MudButton OnClick="@(() => AddNewColumnFromSelectedSourceColumns())">Lisää valituista sarake</MudButton>
                        <MudButton OnClick="@(() => AddSelectedColumns())">Lisää valitut sarakkeet</MudButton>

                    </ToolBarContent>
                    <HeaderContent>
                        <MudTh>Table name</MudTh>
                        <MudTh>ColumnName name</MudTh>
                        <MudTh>ExampleData name</MudTh>
                        <MudTh>RowCount</MudTh>
                        <MudTh>UniqueCount</MudTh>
                        <MudTh>NullCount</MudTh>
                        <MudTh></MudTh>
                    </HeaderContent>
                    <RowTemplate>
                        <MudTd DataLabel="Table">@context.TableName

                            @if (context.IsPrimaryKey)
                            {
                            <MudIcon Icon="@Icons.Material.Filled.Key" Color="Color.Secondary" Size="Size.Small" Title="Primary Key" />
                            }
                            else if (context.IsSourceSystemKey)
                            {
                            <MudIcon Icon="@Icons.Material.Outlined.Key" Color="Color.Warning" Size="Size.Small" Title="Source System Key" />
                            }
                            </MudTd>
                        <MudTd DataLabel="column">@context.ColumnName </MudTd>
                        <MudTd DataLabel="example">@context.ExampleData </MudTd>
                        <MudTd DataLabel="rowcount">@context.RowCount </MudTd>
                        <MudTd DataLabel="uniquecount">@context.UniqueCount </MudTd>
                        <MudTd DataLabel="nullcount">@context.NullCount </MudTd>
                        <MudTd>
                            <MudStack>
                                <MudIconButton Icon="@Icons.Material.Filled.Add" Size="Size.Small" Color="Color.Primary" OnClick="@(() => AddColumnMapping(context))"></MudIconButton>
                            </MudStack>
                        </MudTd>
                    </RowTemplate>
                </MudTable>


                }
            </MudItem>
            <MudItem xs="12" md="6">
                <MudTable Items="TargetTable.ColumnMappings"
                          OnRowClick="ColumnRefClickEvent"
                          RowClassFunc="@SelectedRowClassFunc"
                          T="ColumnMapping"
                          Height="60vh"
                          >

                    <HeaderContent>
                        <MudTh>ColumnName name</MudTh>
                        <MudTh>SourceColumns</MudTh>
                        <MudTh>IsKey</MudTh>
                        <MudTh>Description</MudTh>
                        <MudTh></MudTh>
                    </HeaderContent>
                    <RowTemplate>
                        <MudTd DataLabel="column">
                            <MudTextField Label="ColumnName" @bind-Value="@context.TargetColumnName"/>
                        </MudTd>
                        <MudTd DataLabel="example">@context.SourceColumnNames </MudTd>
                        <MudTd DataLabel="IsKey">
                            <MudCheckBox @bind-Value="@context.IsKey" Color="Color.Primary" />
                        </MudTd>
                        <MudTd DataLabel="uniquecount">
                            <MudTextField Label="Description" @bind-Value="@context.Description"/>
                        </MudTd>
                        <MudTd>
                            <MudStack>
                                <MudIconButton Icon="@Icons.Material.Filled.Add" Size="Size.Small" Color="Color.Primary" OnClick="@(() => AddRelationship(context))"></MudIconButton>
                            </MudStack>
                        </MudTd>
                    </RowTemplate>
                </MudTable>

            </MudItem>
        </MudGrid>

        

    </DialogContent>
    <DialogActions>
        <MudButton OnClick="Cancel">Cancel</MudButton>
        <MudButton Color="Color.Primary" OnClick="Save">Save</MudButton>
    </DialogActions>
</MudDialog>

@code {
    [CascadingParameter] IMudDialogInstance MudDialog { get; set; }
    [Parameter] public TargetTableDefinition TargetTable { get; set; }
    public ColumnMapping? selectedTargetColumn { get; set; }

    // private Dictionary<SourceColumnReference,SourceColumnInfo> _sourceColumnInfos = new Dictionary<SourceColumnReference, SourceColumnInfo>();
    
    private List<SourceColumnInfo> _sourceColumnInfos = new List<SourceColumnInfo>();
    

    private string targetTableName;
    private HashSet<SourceColumnInfo> _selectedSourceColumns = new HashSet<SourceColumnInfo>();


    protected override void OnInitialized()
    {
        targetTableName = TargetTable?.Name ?? "";
        
        _sourceColumnInfos = AppState.SourceTables.SelectMany(x => x.Columns).Where(x => !x.IsUseless).ToList();
        
        
        
    }
    
    private void Cancel()
    {
        MudDialog.Cancel();
    }


    private void Save(MouseEventArgs obj)
    {
        TargetTable.Name = targetTableName;
        MudDialog.Close();
    }

    private Task AddColumnMapping(SourceColumnInfo context)
    {
        var listOfSourceColumns = new List<SourceColumnInfo>() { context };
        TargetTable.AddColumnFromSourceColumns(listOfSourceColumns);
        return Task.CompletedTask;
    }

    private Task AddNewColumnFromSelectedSourceColumns()
    {
        if (_selectedSourceColumns == null || _selectedSourceColumns.Count == 0)
        {
            //todo message
            return Task.CompletedTask;
        }
        var listOfSourceColumns = new List<SourceColumnInfo>();
        foreach (var selectedColumn in _selectedSourceColumns)
        {
            listOfSourceColumns.Add(selectedColumn);
        }
        TargetTable.AddColumnFromSourceColumns(listOfSourceColumns);
        _selectedSourceColumns.Clear();
        return Task.CompletedTask;
        
    }

    private Task AddSelectedColumns()
    {
        if (_selectedSourceColumns == null || _selectedSourceColumns.Count == 0)
        {
            //todo message
            return Task.CompletedTask;
        }
        foreach (var selectedColumn in _selectedSourceColumns)
        {
            TargetTable.AddColumnFromSourceColumns(new List<SourceColumnInfo>() { selectedColumn });
        }
        _selectedSourceColumns.Clear();
        return Task.CompletedTask;
    }

    private Task selectedTargetColumnChanged(ColumnMapping item)
    {
        if(_selectedSourceColumns.Count > 0)
        {
            //todo
            // confirmdialog, DO YOU WANT TO ADD TO THIS COLUMN
            foreach (var selectedSourceColumn in _selectedSourceColumns)
            {
                item.SourceColumns.MergeSourceColumns(selectedSourceColumn);

            }
        }
        if (item != null)
        {
            // select all source columns that are item sourcecolumns
            _selectedSourceColumns = new HashSet<SourceColumnInfo>();
            foreach (var sourceColumn in item.SourceColumns)
            {
                var sourceColumnInfo = _sourceColumnInfos.FirstOrDefault(x => x.ColumnName == sourceColumn.ColumnName && x.TableName == sourceColumn.TableName);
                if (sourceColumnInfo != null)
                {
                    _selectedSourceColumns.Add(sourceColumnInfo);
                }
            }
        }
        return Task.CompletedTask;
    }

    private Task SelectedSourceColumnChanged(HashSet<SourceColumnInfo> item)
    {
        if (item != null)
        {
            _selectedSourceColumns = item;
        }
        else
        {
            _selectedSourceColumns = new HashSet<SourceColumnInfo>();
        }
        if(selectedTargetColumn != null)
        {
            selectedTargetColumn.SourceColumns = item.Select(x => new SourceColumnReference
            {
                TableName = x.TableName,
                ColumnName = x.ColumnName
            }).ToList();

        }
        return Task.CompletedTask;
    }

    private void ColumnRefClickEvent(TableRowClickEventArgs<ColumnMapping> obj)
    {
        if (obj.Item != null)
        {
            if (obj.Item == selectedTargetColumn)
            {
                selectedTargetColumn = null;
                _selectedSourceColumns.Clear();
            }
            else
            {
                selectedTargetColumn = obj.Item;
                selectedTargetColumnChanged(selectedTargetColumn);
            }
        }
    }

    private string SelectedRowClassFunc(ColumnMapping arg1, int arg2)
    {
        if (selectedTargetColumn == arg1)
        {
            return "selected";
        }
        return string.Empty;
    }

    private async Task AddRelationship(ColumnMapping context)
    {
        var parameters = new DialogParameters
        {
            ["sourceTable"] = TargetTable.Name,
            ["sourceColumn"] = context.TargetColumnName,
        };
        var dialog = await DialogService.ShowAsync<CreateRelationshipDialog>("Create New Relationship", parameters);
        var result = await dialog.Result;
        if (!result.Canceled && result.Data is TargetTableRelationship newRelationship)
        {
            AppState.TargetTableRelationships.Add(newRelationship);
            await AppState.SaveTargetTables();
        }
        
    }

}
